name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # 增加超时时间至30分钟
    strategy:
      max-parallel: 2 # 一次最多并行运行 2 个构建任务
      matrix:
        include:
          # Linux Desktop
          - os: ubuntu-latest
            platform: 'linux-x86_64'
            rust_target: 'x86_64-unknown-linux-gnu'
            build_cmd: 'tauri build --target x86_64-unknown-linux-gnu'

          # macOS Desktop (x64)
          - os: macos-latest
            platform: 'darwin-x86_64'
            rust_target: 'x86_64-apple-darwin'
            build_cmd: 'tauri build --target x86_64-apple-darwin'

          # macOS Desktop (Apple-Silicon)
          - os: macos-14
            platform: 'darwin-aarch64'
            rust_target: 'aarch64-apple-darwin'
            build_cmd: 'tauri build --target aarch64-apple-darwin'

          # Windows Desktop
          - os: windows-latest
            platform: 'windows-x86_64'
            rust_target: 'x86_64-pc-windows-msvc'
            build_cmd: 'tauri build --target x86_64-pc-windows-msvc'

          # iOS (arm64)
          - os: macos-latest
            platform: 'ios-aarch64'
            rust_target: 'aarch64-apple-ios'
            build_cmd: 'tauri ios build'

          # Android (arm64)
          - os: ubuntu-latest
            platform: 'android-aarch64'
            rust_target: 'aarch64-linux-android'
            build_cmd: 'tauri android build'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.rust_target }}

    # Android 专用依赖
    - name: Set up Android SDK
      if: contains(matrix.platform, 'android')
      uses: android-actions/setup-android@v3

    - name: Install Rust dependencies for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-0 libappindicator3-1 libgtk-3-0 patchelf

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Import Apple Certificate
      if: runner.os == 'macOS'
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

    - name: Build the application
      run: |
        if [ -z "${{ matrix.build_cmd }}" ]; then
          yarn tauri build --target ${{ matrix.rust_target }}
        else
          yarn ${{ matrix.build_cmd }}
        fi
      env:
        TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tauri-build-${{ matrix.platform }}
        path: |
          src-tauri/target/**/release/bundle/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许上传 Release 产物
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: src-tauri/target/

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

    - name: Generate update manifest
      id: generate_manifest
      run: |
        # 赋予执行权限
        chmod +x scripts/generate-update-manifest.js
        # 运行脚本
        node scripts/generate-update-manifest.js
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        RELEASE_NOTES: "See the release notes for details."
        npm_package_version: ${{ steps.get_version.outputs.VERSION }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 'Release ${{ github.ref_name }}'
        body: |
          Automated release for version ${{ github.ref_name }}.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -x # 开启调试模式

        # 定义根目录
        TARGET_DIR="src-tauri/target"
        VERSION="${{ steps.get_version.outputs.VERSION }}"

        # 创建一个临时目录来整理所有待上传的文件
        UPLOAD_DIR=$(mktemp -d)
        
        # 查找并移动 Linux 产物
        # find "$TARGET_DIR/tauri-build-linux-x86_64/appimage" -name "*.AppImage" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-amd64.AppImage" \;
        # find "$TARGET_DIR/tauri-build-linux-x86_64/appimage" -name "*.AppImage.tar.gz" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-amd64.AppImage.tar.gz" \;
        # find "$TARGET_DIR/tauri-build-linux-x86_64/appimage" -name "*.AppImage.tar.gz.sig" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-amd64.AppImage.tar.gz.sig" \;

        # 查找并移动 macOS x64 产物
        find "$TARGET_DIR/tauri-build-darwin-x86_64/macos" -name "*.app.tar.gz" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x86_64.app.tar.gz" \;
        find "$TARGET_DIR/tauri-build-darwin-x86_64/macos" -name "*.app.tar.gz.sig" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x86_64.app.tar.gz.sig" \;
        find "$TARGET_DIR/tauri-build-darwin-x86_64/dmg" -name "*.dmg" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x86_64.dmg" \;

        # 查找并移动 macOS aarch64 产物
        find "$TARGET_DIR/tauri-build-darwin-aarch64/macos" -name "*.app.tar.gz" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-aarch64.app.tar.gz" \;
        find "$TARGET_DIR/tauri-build-darwin-aarch64/macos" -name "*.app.tar.gz.sig" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-aarch64.app.tar.gz.sig" \;
        find "$TARGET_DIR/tauri-build-darwin-aarch64/dmg" -name "*.dmg" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-aarch64.dmg" \;
        
        # 查找并移动 Windows 产物 (NSIS)
        find "$TARGET_DIR/tauri-build-windows-x86_64/nsis" -name "*_x64-setup.exe" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x64-setup.exe" \;
        find "$TARGET_DIR/tauri-build-windows-x86_64/nsis" -name "*_x64-setup.nsis.zip" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x64-setup.nsis.zip" \;
        find "$TARGET_DIR/tauri-build-windows-x86_64/nsis" -name "*_x64-setup.nsis.zip.sig" -exec mv {} "$UPLOAD_DIR/mytips-${VERSION}-x64-setup.nsis.zip.sig" \;
        
        # 查找并移动清单文件
        find dist/update-manifests -name "*.json" -exec mv {} "$UPLOAD_DIR/" \;

        # 显示所有待上传的文件
        ls -l "$UPLOAD_DIR"

        # 使用 gh cli 上传所有文件
        gh release upload ${{ github.ref_name }} "$UPLOAD_DIR"/* 